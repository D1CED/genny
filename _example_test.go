// Given this generic Go code (github.com/cheekybits/genny/tree/master/examples/queue)
// which compiles and is tested:
package main_test

import (
	"fmt"
	"os"
	"os/exec"

	"github.com/cheekybits/genny/generic"
)

// NOTE: this is how easy it is to define a generic type
type Something generic.Type

// SomethingQueue is a queue of Somethings.
type SomethingQueue struct {
	items []Something
}

func NewSomethingQueue() *SomethingQueue {
	return &SomethingQueue{items: make([]Something, 0)}
}
func (q *SomethingQueue) Push(item Something) {
	q.items = append(q.items, item)
}
func (q *SomethingQueue) Pop() Something {
	item := q.items[0]
	q.items = q.items[1:]
	return item
}

func Example() {
	// When 'genny gen' is invoked like this:
	//
	//    cat source.go | genny gen "Something=string"
	//
	// Excluding this function you should get the output shown below.

	// You can write scripts in GO that generate files for you but using
	// 'go generate' is still the recommended way.
	thisFile := "${GOPATH}/src/github.com/cheekybits/genny/example_queue_test.go"
	thisFile = os.ExpandEnv(thisFile)
	err := exec.Command("genny", "-in="+thisFile, "gen",
		"Something=string").Run()
	if err != nil {
		fmt.Println(err)
		if exitErr, ok := err.(*exec.ExitError); ok {
			fmt.Println(string(exitErr.Stderr))
		}
	}

	// Similar Output:
	// // Code generated by genny - Generics for Go; DO NOT EDIT.
	// // More information at github.com/cheekybits/genny
	// // or using 'go doc github.com/cheekybits/genny'
	//
	// // Given this generic Go code (github.com/cheekybits/genny/tree/master/examples/queue)
	// // which compiles and is tested:
	//
	// package main_test
	//
	// // StringQueue is a queue of Strings.
	// type StringQueue struct {
	// 	items []string
	// }
	//
	// func NewStringQueue() *StringQueue {
	// 	return &StringQueue{items: make([]string, 0)}
	// }
	// func (q *StringQueue) Push(item string) {
	// 	q.items = append(q.items, item)
	// }
	// func (q *StringQueue) Pop() string {
	// 	item := q.items[0]
	// 	q.items = q.items[1:]
	// 	return item
	// }
}
