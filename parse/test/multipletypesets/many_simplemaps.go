// Code generated by genny - Generics for Go; DO NOT EDIT.
// More information at github.com/cheekybits/genny
// or with 'go doc github.com/cheekybits/genny'

package multipletypesets

import "log"

type IntStringMap map[int]string

func (m IntStringMap) Has(key int) bool {
	_, ok := m[key]
	return ok
}

func (m IntStringMap) Get(key int) string {
	return m[key]
}

func (m IntStringMap) Set(key int, value string) IntStringMap {
	log.Println(value)
	m[key] = value
	return m
}

type IntBoolMap map[int]bool

func (m IntBoolMap) Has(key int) bool {
	_, ok := m[key]
	return ok
}

func (m IntBoolMap) Get(key int) bool {
	return m[key]
}

func (m IntBoolMap) Set(key int, value bool) IntBoolMap {
	log.Println(value)
	m[key] = value
	return m
}

type Float64StringMap map[float64]string

func (m Float64StringMap) Has(key float64) bool {
	_, ok := m[key]
	return ok
}

func (m Float64StringMap) Get(key float64) string {
	return m[key]
}

func (m Float64StringMap) Set(key float64, value string) Float64StringMap {
	log.Println(value)
	m[key] = value
	return m
}

type Float64BoolMap map[float64]bool

func (m Float64BoolMap) Has(key float64) bool {
	_, ok := m[key]
	return ok
}

func (m Float64BoolMap) Get(key float64) bool {
	return m[key]
}

func (m Float64BoolMap) Set(key float64, value bool) Float64BoolMap {
	log.Println(value)
	m[key] = value
	return m
}
